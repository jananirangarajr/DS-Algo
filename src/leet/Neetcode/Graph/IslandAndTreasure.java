package leet.Neetcode.Graph;

public class IslandAndTreasure {
    public static void main(String[] args) {
//        int[][] grid = {
//                {2147483647,-1,0,2147483647},
//                {2147483647,2147483647,2147483647,-1},
//                {2147483647,-1,2147483647,-1},
//                {0,-1,2147483647,2147483647}
//        };
        int[][] grid = {{0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {2147483647,-1,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,-1,-1},
                {2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647},
                {0,-1,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647}};
        islandsAndTreasure(grid);
        for (int i = 0; i < grid.length; i++){
            for (int j = 0; j < grid[0].length; j++){
                System.out.print(grid[i][j]+" ");
            }
            System.out.println();
        }
    }
    public static void islandsAndTreasure(int[][] grid) {

        for (int i = 0; i < grid.length; i++){
            for (int j = 0; j < grid[0].length; j++){
                if (grid[i][j] == 2147483647) {
                    int val = dfs(grid, i, j, 0,new boolean[grid.length][grid[0].length]);
                    grid[i][j] = val == 0 ? 2147483647: val;
                }
            }
        }
    }
    private static int dfs(int[][] grid, int row, int col,int count,boolean[][] visited){
        if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || grid[row][col] == -1 || visited[row][col])
            return 2147483647;
        if (grid[row][col] == 0)
            return count;
        visited[row][col] = true;
        int down = dfs(grid, row+1, col,count+1,visited);
        int up = dfs(grid, row-1, col,count+1,visited);
        int left = dfs(grid, row, col-1,count+1,visited);
        int right = dfs(grid, row, col+1,count+1,visited);
        visited[row][col] = false;
        return Math.min(down ,Math.min(up, Math.min(left,right)));
    }
}
